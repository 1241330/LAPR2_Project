@startuml

skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam linetype ortho
skinparam classAttributeIconSize 0

' --------------------
' DOMAIN CLASSES
' --------------------
class Station {
    - name : String
    - identifier : int
    - type : StationType
    - position : Position
    - direction : String
    + Station(type: StationType, position: Position, idMap: int, direction: String)
    + getName(): String
    + getPosition(): Position
    + getStationType(): String
    + getDirection(): String
    + setName(newName: String): void
    + toString(): String
}

enum StationType {
    DEPOT
    STATION
    TERMINAL
    ...()
}

class Position {
    + Position(x : int, y : int)
    + getX() : int
    + getY() : int
    + equalsPosition(position : Position) : boolean
    + toString() : String
    - x : int
    - y : int
}

class Map {
    + addElement(element: MapElement): boolean
    + removeElement(element: MapElement): boolean
    + getOccupiedPositions(): List<Position>
    + getStationList(): List<Station>
    + getId(): int
    ...()
}

abstract class MapElement {
    - position : Position
    - occupiedPositions : List<Position>
    + getPosition() : Position
    + setPosition(position : Position) : void
    + getOccupiedPositions() : List<Position>
    ...()
}

class Simulation {
    - actualMoney : int
    + getActualMoney(): int
    + setActualMoney(money: int): void
    ...()
}

' --------------------
' CONTROLLER
' --------------------
class CreateStationController {
    - mapRepository : MapRepository
    - actualMap : Map
    - stationType : StationType
    - position : Position
    - direction : String
    - simulation : Simulation
    + CreateStationController(idMap: int, simulation: Simulation)
    + selectStationType(): boolean
    + readPositionStation(): boolean
    + selectStationDirection(): boolean
    + createStation(type: StationType, position: Position, direction: String, customName: String, simulation: Simulation): Station
    + getStationType(): StationType
    + getPosition(): Position
    + getDirection(): String
    + getActualMap(): Map
    + getSimulation(): Simulation
}

' --------------------
' UI
' --------------------
class CreateStationUI {
    - controller : CreateStationController
    - createdStation : Station
    + CreateStationUI(idMap: int, simulation: Simulation)
    + run(): void
}

' --------------------
' REPOSITORIES
' --------------------
class StationRepository {
    - stations : List<Station>
    + addStation(station: Station): boolean
    + removeStation(station: Station): boolean
    + StationNameExists(name: String): boolean
    + getStations(): List<Station>
}

class MapRepository {
    + getMapById(id : int) : Map
    ...()
}

class Repositories {
    + {static} getInstance()
    + getStationRepository(): StationRepository
    + getMapRepository(): MapRepository
    ...()
}

' --------------------
' RELATIONSHIPS
' --------------------
CreateStationUI "1" ..> "1" CreateStationController
CreateStationController "1" .> "1" Map : manages
CreateStationController "1" ..> "1" MapRepository
CreateStationController "1" ..> "1" StationRepository
CreateStationController "1" ..> "1" Simulation
CreateStationController "1" ..> "1" Station
CreateStationController  ..> StationType : uses

Station  ..> StationType : uses


Map "1" *--> "*" MapElement : contains
Map "1" --> "*" Station: contains
MapElement "1" --> "1" Position : located at

Repositories -> "1" Repositories : instance
Repositories "1" --> "1" StationRepository
Repositories "1" --> "1" MapRepository : provides
StationRepository "1" --> "*" Station : manages
MapRepository "1" --> "*" Map : manages

' --------------------
' NOTES
' --------------------
note left of CreateStationController
   The ‘CreateStationController’ manages the station creation process,
   including selection of type, position, direction and name validation.end note
end note

note left of CreateStationUI
    The ‘CreateStationUI’ is responsible for
    interacting with the user,collecting data
    and displaying the results of the station
    creation process.
end note

note bottom of Station
    The ‘Station’ class represents a station on the map, with
    attributes such as name, type, position and direction.
end note

note bottom of StationRepository
    StationRepository’ is able to manage how stations
     are stored and allows you to consult them.

end note

@enduml