@startuml
skinparam packageStyle rectangle
skinparam shadowing false
skinparam classAttributeIconSize 0
left to right direction

class CreateScenarioController {
    - scenario: Scenario
    - mapRepository: MapRepository
    - locomotiveRepository: LocomotiveRepository
    - houseBlockResourceRepository: HouseBlockResourceRepository
    - primaryResourceRepository: PrimaryResourceRepository
    - transformingResourceRepository: TransformingResourceRepository
    - houseBlockResourceList: List<HouseBlockResource>
    - primaryResourceList: List<PrimaryResource>
    - transformingResourceList: List<TransformingResource>
    - allResourceListIndustry: List<ResourcesType>
    - allResourcesList: List<ResourcesType>
    - actualMap: Map
    - name: String
    - initialDate: TimeDate
    - endDate: TimeDate
    - initialMoney: int
    - industriesList: List<Industry>
    - fuelTypeList: List<FuelType>
    - resourceListImport: List<ResourcesType>
    - resourceListExport: List<ResourcesType>
    - resourceListTransforming: List<ResourcesType>
    - availableFuelTypeList: List<FuelType>
    - availableHouseBlockResourceList: List<HouseBlockResource>
    + createScenario() : void
    + removeScenario() : void
    + setLocomotiveListAvailable() : void
    + clearLocomotiveListAvailable() : void
    + setResourcesListScenario() : void
    + setHouseBlockResourceListScenario() : void
    + setHouseBlockResourceListScenarioDefault() : void
    + setResourceInPrimaryIndustry(industry, iResourceGenerated) : void
    + setResourceInTransformingIndustry(industry, iResourceTransforming) : void
    + initializeMixedIndustry(industry) : void
    + addImportMixedIndustry(industry, iResource) : void
    + addExportMixedIndustry(industry, iResource) : void
    + addTransformingMixedIndustry(industry, iResource) : void
}

class Scenario {
    - map: Map
    - name: String
    - citiesList: List<City>
    - industriesList: List<Industry>
    - industriesListInScenario: List<Industry>
    - houseBlockResourceList: List<HouseBlockResource>
    - availableLocomotiveList: List<Locomotive>
    - boughtLocomotives: List<Locomotive>
    - initialMoney: int
    - beginningDate: TimeDate
    - endDate: TimeDate
    - typeResourceList: List<ResourcesType>
    - boughtCarriages: List<Carriage>
    - trainList: List<Train>
    + addLocomotive(locomotive: Locomotive) : void
    + clearAvailableLocomotiveList() : void
    + setTypeResourceList(typeResourceList: List<ResourcesType>) : void
    + setHouseBlockResourceList(houseBlockResourceList: List<HouseBlockResource>) : void
    + addPrimaryIndustryScenarioByIndustryMap(primaryIndustry: PrimaryIndustry) : void
    + addTransformingIndustryScenarioByIndustryMap(transformingIndustry: TransformingIndustry) : void
    + addMixedIndustryScenarioByIndustryMap(mixedIndustry: MixedIndustry) : void
}

class Repositories {
    - instance: Repositories
    - authenticationRepository: AuthenticationRepository
    - locomotiveRepository: LocomotiveRepository
    - carriageRepository: CarriageRepository
    - mapRepository: MapRepository
    - primaryResourceRepository: PrimaryResourceRepository
    - transformingResourceRepository: TransformingResourceRepository
    - houseBlockResourceRepository: HouseBlockResourceRepository
    + {static} getInstance() : Repositories
    + getMapRepository() : MapRepository
    + getLocomotiveRepository() : LocomotiveRepository
    + getPrimaryResourceRepository() : PrimaryResourceRepository
    + getTransformingTypeRepository() : TransformingResourceRepository
    + getHouseBlockResourceRepository() : HouseBlockResourceRepository
}

class Map {
    - citiesList: List<City>
    - industriesList: List<Industry>
    + getCitiesList() : List<City>
    + getIndustriesList() : List<Industry>
    + addScenario(scenario: Scenario) : void
    + removeScenario(scenario: Scenario) : void
    + getName(): String
    + addIndustry(industry: Industry): void
    + removeIndustry(industry: Industry): void
    + getIndustryByName(name: String): Industry
}

class Locomotive {
    - name: String
    - power: double
    - acceleration: double
    - topSpeed: double
    - startYearOperation: int
    - acquisitionPrice: int
    - fuelType: FuelType
    - railroadLineAssosiated: int
    - maxCarriages: int
    + getName(): String
    + getFuelType(): FuelType
    + getMaxCarriages(): int
    + getTopSpeed(): double
    + getPower(): double
    + getAcceleration(): double
    + getAcquisitionPrice(): int
    + getStartYearOperation(): int
}

class ResourcesType {
    - name: String
    - maxResources: int
    - intervalBetweenResourceGeneration: int
    - quantityProduced: int
    + getName(): String
    + getMaxResources(): int
    + getIntervalBetweenResourceGeneration(): int
    + getQuantityProduced(): int
}

class Port {
    + getName(): String
    + getImportedCargoes(): List<ResourcesType>
    + getExportedCargoes(): List<ResourcesType>
    + getTransformingCargoes(): List<ResourcesType>
}

class Industry {
    - name: String
    - inputResources: List<ResourcesType>
    - outputResources: List<ResourcesType>
    - generationInterval: int
    - generationQuantity: int
    + getName(): String
    + getInputResources(): List<ResourcesType>
    + getOutputResources(): List<ResourcesType>
    + getGenerationInterval(): int
    + getGenerationQuantity(): int
    + redefineGenerationFactors(resource: ResourcesType, interval: int, quantity: int): void
}

class PrimaryIndustry extends Industry {
    - primaryResource: PrimaryResource
    - maxResources: int
    - intervalBetweenResourceGeneration: int
    - quantityProduced: int
    - clonedIndustryList: List<PrimaryIndustry>
    - scenarioName: String
    + getPrimaryResource(): ResourcesType
    + getMaxResources(): int
    + getIntervalBetweenResourceGeneration(): int
    + getQuantityProduced(): int
    + clonePrimaryIndustry(primaryResource: PrimaryResource, scenario: Scenario): void
    + getClonedPrimaryIndustry(scenario: Scenario): PrimaryIndustry
}

class TransformingIndustry extends Industry {
    - transformingResource: TransformingResource
    - primaryResources: List<ResourcesType>
    - clonedIndustryList: List<TransformingIndustry>
    - scenarioName: String
    + getTransformingResource(): TransformingResource
    + getPrimaryResources(): List<ResourcesType>
    + cloneTransformingIndustry(transformingResource: TransformingResource, scenario: Scenario): void
    + getClonedTransformingIndustry(scenario: Scenario): TransformingIndustry
}

class MixedIndustry extends Industry {
    - exportedResources: List<ResourcesType>
    - importedResources: List<ResourcesType>
    - transformedResources: List<ResourcesType>
    - clonedIndustryList: List<MixedIndustry>
    - scenarioName: String
    + getExportedResources(): List<ResourcesType>
    + getImportedResources(): List<ResourcesType>
    + getTransformedResources(): List<ResourcesType>
    + getClonedIndustryList(): List<MixedIndustry>
    + addTransformingResource(resource: TransformingResource): void
    + addExportedResource(resource: ResourcesType): void
    + addImportedResource(resource: ResourcesType): void
    + getScenarioName(): String
    + cloneMixedIndustry(scenario: Scenario): void
    + getClonedMixedIndustry(scenario: Scenario): MixedIndustry
    + transformedResource(resource: TransformingResource, scenario: Scenario): void
    + exportResource(resource: ResourcesType, scenario: Scenario): void
    + importResource(resource: ResourcesType, scenario: Scenario): void
}

class PrimaryResource {
    + getMaxResources(): int
    + getIntervalBetweenResourceGeneration(): int
    + getQuantityProduced(): int
    + getName(): String
}

class HouseBlockResource {
    + getName(): String
}

class TransformingResource {
    - neededResources: List<ResourcesType>
    + getNeededResources(): List<ResourcesType>
    + getTransformation(): String
    + getName(): String
}

class MapRepository {
    + getMapByName(name: String): Map
    + getAllMaps(): List<Map>
    + saveMap(map: Map): void
    + removeMap(map: Map): void
}

class LocomotiveRepository {
    + getLocomotiveByName(name: String): Locomotive
    + getAllLocomotives(): List<Locomotive>
    + saveLocomotive(locomotive: Locomotive): void
    + removeLocomotive(locomotive: Locomotive): void
}

class PrimaryResourceRepository {
    + getPrimaryResourceByName(name: String): PrimaryResource
    + getAllPrimaryResources(): List<PrimaryResource>
    + savePrimaryResource(resource: PrimaryResource): void
    + removePrimaryResource(resource: PrimaryResource): void
}

class TransformingResourceRepository {
    + getTransformingResourceByName(name: String): TransformingResource
    + getAllTransformingResources(): List<TransformingResource>
    + saveTransformingResource(resource: TransformingResource): void
    + removeTransformingResource(resource: TransformingResource): void
}

class HouseBlockResourceRepository {
    + getHouseBlockResourceByName(name: String): HouseBlockResource
    + getAllHouseBlockResources(): List<HouseBlockResource>
    + saveHouseBlockResource(resource: HouseBlockResource): void
    + removeHouseBlockResource(resource: HouseBlockResource): void
}

class City {
    - name: String
    - population: int
    + getName(): String
    + getPopulation(): int
    + setPopulation(population: int): void
}

class TimeDate {
    - year: int
    - month: int
}

PrimaryResource --|> ResourcesType
HouseBlockResource --|> ResourcesType
TransformingResource --|> ResourcesType

Scenario "1" --> "1" Map : uses
Scenario "1" --> "*" Locomotive : contains
Scenario "1" --> "*" Industry : contains
Scenario "1" --> "*" HouseBlockResource : contains
Scenario "1" --> "*" ResourcesType : manages
Scenario "1" --> "1" TimeDate : start/end date

Map "1" --> "*" Industry : contains
Map "1" --> "*" City : contains

Repositories -> "1" Repositories : instance
Repositories "1" --> "1" MapRepository : accesses
Repositories "1" --> "1" LocomotiveRepository : accesses
Repositories "1" --> "1" PrimaryResourceRepository : accesses
Repositories "1" --> "1" TransformingResourceRepository : accesses
Repositories "1" --> "1" HouseBlockResourceRepository : accesses

CreateScenarioController "1" --> "1" Scenario : manages
CreateScenarioController "1" --> "1" Map : selects
CreateScenarioController "1" --> "*" Industry : sets
CreateScenarioController "1" --> "*" ResourcesType : uses
CreateScenarioController "1" --> "*" HouseBlockResource : configures
CreateScenarioController "1" --> "*" PrimaryResource : configures
CreateScenarioController "1" --> "*" TransformingResource : configures
CreateScenarioController "1" --> "1" TimeDate : defines period
CreateScenarioController "1" --> "1" Repositories : accesses

@enduml
