package pt.ipp.isep.dei.domain.Event;

import pt.ipp.isep.dei.domain.Industry.Industry;
import pt.ipp.isep.dei.domain.Resource.Resource;
import pt.ipp.isep.dei.domain.Resource.ResourcesType;
import pt.ipp.isep.dei.domain.Resource.TransformingResource;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents an event that transforms resources at a specific industry.
 * This event checks if the required resources are available in the industry's inventory,
 * removes them, adds the resulting transformed resource, and logs the operation.
 */
public class TranformingEvent extends Event {

    /** The industry where the transformation occurs. */
    private Industry industry;

    /** The resource to be transformed. */
    private TransformingResource transformingResource;

    /** Flag to indicate if the first menu should be printed. */
    private static boolean printFirstMenu;

    /**
     * Constructs a new TransformingEvent.
     *
     * @param name the name of the event
     * @param interval the interval between event triggers
     * @param actualDate the current date in the simulation
     * @param transformingResource the resource to be transformed
     * @param industry the industry where the transformation occurs
     */
    public TranformingEvent(String name, int interval, int actualDate, TransformingResource transformingResource, Industry industry) {
        super(name, interval, actualDate);
        this.transformingResource = transformingResource;
        this.industry = industry;
        printFirstMenu = true;
    }

    /**
     * Triggers the transforming event.
     * Checks if all needed resources are available at the industry,
     * removes them, adds the transformed resource, and logs the operation.
     *
     * @return a list of log messages generated by the event
     */
    @Override
    public List<String> trigger() {
        List<String> newLogs = new ArrayList<>();
        boolean validOperation = true;

        // Check if all required resources are available in the industry inventory
        for (ResourcesType neededResource : transformingResource.getNeededResources()) {
            if (!industry.existsResourceInInventory(neededResource)) {
                validOperation = false;
                break;
            }
        }

        // If all resources are available, perform the transformation
        if (validOperation) {
            for (ResourcesType neededResource : transformingResource.getNeededResources()) {
                industry.removeResourceFromInventory(new Resource(neededResource, 1));
            }
            industry.addResourceToInventory(new Resource(transformingResource, 1));
            if (printFirstMenu) {
                newLogs.add(" ");
                newLogs.add("⚙ Manufacturing:");
                printFirstMenu = false;
            }
            newLogs.add(String.format("   • %-4s × %-22s @ %s", 1, transformingResource.getTransformation(), industry.getName()));
            industry.setUpdatedInventory(true);
        }

        this.setNextGenerationDate(getNextGenerationDate() + getInterval());
        return newLogs;
    }

    /**
     * Gets the industry where the transformation occurs.
     *
     * @return the industry
     */
    public Industry getIndustry() {
        return industry;
    }

    /**
     * Sets the industry where the transformation occurs.
     *
     * @param industry the industry to set
     */
    public void setIndustry(Industry industry) {
        this.industry = industry;
    }

    /**
     * Gets the transforming resource.
     *
     * @return the transforming resource
     */
    public TransformingResource getTransformingResource() {
        return transformingResource;
    }

    /**
     * Sets the transforming resource.
     *
     * @param transformingResource the transforming resource to set
     */
    public void setTransformingResource(TransformingResource transformingResource) {
        this.transformingResource = transformingResource;
    }

    /**
     * Checks if the first menu should be printed.
     *
     * @return true if the first menu should be printed, false otherwise
     */
    public static boolean isPrintFirstMenu() {
        return printFirstMenu;
    }

    /**
     * Sets whether the first menu should be printed.
     *
     * @param printFirstMenu true to print the first menu, false otherwise
     */
    public static void setPrintFirstMenu(boolean printFirstMenu) {
        TranformingEvent.printFirstMenu = printFirstMenu;
    }
}