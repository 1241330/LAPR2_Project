package pt.ipp.isep.dei.domain.Industry;

import pt.ipp.isep.dei.domain._Others_.Position;
import pt.ipp.isep.dei.domain.Resource.PrimaryResource;
import pt.ipp.isep.dei.domain.Resource.ResourcesType;
import pt.ipp.isep.dei.domain.Scenario.Scenario;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a primary industry that generates resources over time.
 * Extends the Industry class to include specific functionalities for primary industries.
 */
public class PrimaryIndustry extends Industry {

    /** The primary resource generated by the industry. */
    private PrimaryResource primaryResource;

    /** The maximum number of resources the industry can store. */
    private int maxResources;

    /** The interval between resource generation cycles. */
    private int intervalBetweenResourceGeneration;

    /** The quantity of resources produced per generation cycle. */
    private int quantityProduced;

    /** List of cloned primary industries associated with different scenarios. */
    private List<PrimaryIndustry> clonedIndustryList = new ArrayList<>();

    /** The name of the scenario associated with this industry. */
    private String scenarioName;

    /**
     * Constructs a PrimaryIndustry with the specified name, type, and position.
     *
     * @param name     The name of the industry.
     * @param type     The type of the industry.
     * @param position The position of the industry on the map.
     */
    public PrimaryIndustry(String name, IndustryType type, Position position) {
        super(name, type, position);
    }

    /**
     * Constructs a PrimaryIndustry with the specified name, scenario name, and primary resource.
     *
     * @param name            The name of the industry.
     * @param scenarioName    The name of the scenario associated with the industry.
     * @param primaryResource The primary resource generated by the industry.
     */
    public PrimaryIndustry(String name, String scenarioName, PrimaryResource primaryResource) {
        super(name, null, null);
        this.primaryResource = primaryResource;
        this.scenarioName = scenarioName;
        this.maxResources = primaryResource.getMaxResources();
        this.intervalBetweenResourceGeneration = primaryResource.getIntervalBetweenResourceGeneration();
        this.quantityProduced = primaryResource.getQuantityProduced();
    }

    /**
     * Gets the primary resource generated by the industry.
     *
     * @return The primary resource.
     */
    public PrimaryResource getPrimaryResource() {
        return primaryResource;
    }

    /**
     * Sets the primary resource generated by the industry.
     *
     * @param primaryResource The primary resource to set.
     */
    public void setPrimaryResource(PrimaryResource primaryResource) {
        this.primaryResource = primaryResource;
    }

    /**
     * Gets the maximum number of resources the industry can store.
     *
     * @return The maximum resources.
     */
    public int getMaxResources() {
        return maxResources;
    }

    /**
     * Sets the maximum number of resources the industry can store.
     *
     * @param maxResources The maximum resources to set.
     */
    public void setMaxResources(int maxResources) {
        this.maxResources = maxResources;
    }

    /**
     * Gets the interval between resource generation cycles.
     *
     * @return The interval in time units.
     */
    public int getIntervalBetweenResourceGeneration() {
        return intervalBetweenResourceGeneration;
    }

    /**
     * Sets the interval between resource generation cycles.
     *
     * @param intervalBetweenResourceGeneration The interval to set.
     */
    public void setIntervalBetweenResourceGeneration(int intervalBetweenResourceGeneration) {
        this.intervalBetweenResourceGeneration = intervalBetweenResourceGeneration;
    }

    /**
     * Gets the quantity of resources produced per generation cycle.
     *
     * @return The quantity produced.
     */
    public int getQuantityProduced() {
        return quantityProduced;
    }

    /**
     * Sets the quantity of resources produced per generation cycle.
     *
     * @param quantityProduced The quantity to set.
     */
    public void setQuantityProduced(int quantityProduced) {
        this.quantityProduced = quantityProduced;
    }

    /**
     * Gets the list of cloned primary industries associated with different scenarios.
     *
     * @return The list of cloned primary industries.
     */
    public List<PrimaryIndustry> getClonedIndustryList() {
        return clonedIndustryList;
    }

    /**
     * Sets the list of cloned primary industries.
     *
     * @param clonedIndustryList The list to set.
     */
    public void setClonedIndustryList(List<PrimaryIndustry> clonedIndustryList) {
        this.clonedIndustryList = clonedIndustryList;
    }

    /**
     * Gets the name of the scenario associated with this industry.
     *
     * @return The scenario name.
     */
    public String getScenarioName() {
        return scenarioName;
    }

    /**
     * Sets the name of the scenario associated with this industry.
     *
     * @param scenarioName The scenario name to set.
     */
    public void setScenarioName(String scenarioName) {
        this.scenarioName = scenarioName;
    }

    /**
     * Clones the current primary industry and associates it with a specific scenario.
     *
     * @param primaryResource The primary resource for the cloned industry.
     * @param scenario        The scenario to associate with the cloned industry.
     */
    public void clonePrimaryIndustry(PrimaryResource primaryResource, Scenario scenario) {
        PrimaryIndustry clonedIndustry = new PrimaryIndustry(this.getName(), scenario.getName(), primaryResource);
        clonedIndustryList.add(clonedIndustry);
    }

    /**
     * Retrieves a cloned primary industry associated with a specific scenario.
     *
     * @param scenario The scenario to search for.
     * @return The cloned primary industry associated with the scenario, or null if not found.
     */
    public PrimaryIndustry getClonedPrimaryIndustry(Scenario scenario) {
        for (PrimaryIndustry industry : clonedIndustryList) {
            if (industry.scenarioName.equals(scenario.getName())) {
                return industry;
            }
        }
        return null;
    }

    /**
     * Returns a string representation of the primary industry, including its generated resource.
     *
     * @return A formatted string representation of the industry.
     */
    @Override
    public String toString() {
        return getName() + " generates " + primaryResource;
    }
}