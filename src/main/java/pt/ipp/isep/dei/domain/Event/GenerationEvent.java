package pt.ipp.isep.dei.domain.Event;

import pt.ipp.isep.dei.domain.City.HouseBlock;
import pt.ipp.isep.dei.domain.Industry.Industry;
import pt.ipp.isep.dei.domain.Resource.Resource;
import pt.ipp.isep.dei.domain.Station.StationAssociations;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a generation event that adds a specific resource to a station's inventory at regular intervals.
 */
public class GenerationEvent extends Event {

    /** The station or industry association where the resource will be generated. */
    private StationAssociations stationAssociation;

    /** The resource to be generated. */
    private Resource resource;

    /** Flag to control if the production menu should be printed first. */
    private static boolean printFirstMenu;

    /**
     * Constructs a GenerationEvent with the specified parameters.
     *
     * @param name                the name of the event
     * @param interval            the interval between event generations
     * @param actualDate          the current date (used to calculate the next generation date)
     * @param resource            the resource to be generated
     * @param stationAssociation  the station or industry association where the resource will be generated
     */
    public GenerationEvent(String name, int interval, int actualDate, Resource resource, StationAssociations stationAssociation) {
        super(name, interval, actualDate);
        this.resource = resource;
        this.stationAssociation = stationAssociation;
        printFirstMenu = true;
    }

    /**
     * Triggers the generation event, adding the specified resource to the station's inventory if possible.
     * Also prints production information and updates the next generation date.
     *
     * @return a list of log messages generated by the event
     */
    @Override
    public List<String> trigger() {
        List<String> newLogs = new ArrayList<>();
        if (stationAssociation instanceof Industry industry) {
            int quantityAdded = industry.addResourceToInventory(resource);
            if (quantityAdded != -1) {
                printFirstMenu(newLogs);
                newLogs.add(String.format("   • %-4d × %-12s @ %s", quantityAdded, resource.getResourceType().getName(), industry.getName()));
                industry.setUpdatedInventory(true);
            }
        } else {
            HouseBlock houseBlock = (HouseBlock) this.stationAssociation;
            int quantityAdded = houseBlock.addResourceToInventory(resource);
            if (quantityAdded != -1) {
                printFirstMenu(newLogs);
                newLogs.add(String.format("   • %-4d × %-12s @ House Block (%s)", quantityAdded, resource.getResourceType().getName(), houseBlock.getCityName()));
                houseBlock.setUpdatedInventory(true);
            }
        }
        this.setNextGenerationDate(getNextGenerationDate() + getInterval());
        return newLogs;
    }

    /**
     * Prints the production menu if it is the first time.
     *
     * @param newLogs the list of log messages to add the menu to
     */
    private void printFirstMenu(List<String> newLogs) {
        if (printFirstMenu) {
            newLogs.add(" ");
            newLogs.add("\uD83C\uDFED  Production:");
            printFirstMenu = false;
        }
    }

    /**
     * Gets the industry associated with this event.
     *
     * @return the industry, or null if not applicable
     */
    public Industry getIndustry() {
        return (Industry) stationAssociation;
    }

    /**
     * Gets the house block associated with this event.
     *
     * @return the house block, or null if not applicable
     */
    public HouseBlock getHouseBlock() {
        return (HouseBlock) stationAssociation;
    }

    /**
     * Gets the resource to be generated.
     *
     * @return the resource
     */
    public Resource getResource() {
        return resource;
    }

    /**
     * Sets the resource to be generated.
     *
     * @param resource the resource to set
     */
    public void setResource(Resource resource) {
        this.resource = resource;
    }

    /**
     * Gets the station or industry association where the resource will be generated.
     *
     * @return the station association
     */
    public StationAssociations getStationAssociation() {
        return stationAssociation;
    }

    /**
     * Sets the station or industry association where the resource will be generated.
     *
     * @param stationAssociation the station association to set
     */
    public void setStationAssociation(StationAssociations stationAssociation) {
        this.stationAssociation = stationAssociation;
    }

    /**
     * Checks if the production menu should be printed first.
     *
     * @return true if the menu should be printed, false otherwise
     */
    public static boolean isPrintFirstMenu() {
        return printFirstMenu;
    }

    /**
     * Sets whether the production menu should be printed first.
     *
     * @param printFirstMenu the value to set
     */
    public static void setPrintFirstMenu(boolean printFirstMenu) {
        GenerationEvent.printFirstMenu = printFirstMenu;
    }
}